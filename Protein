{$mode ObjFPC}{$H+}
uses StrUtils;
type
  TUChars = set of 'A'..'Z';
const
  cRNA=['A','U','G','C'];
  cProt=['A'..'I','K'..'N','P'..'T','V','W','Y']-['B'];
  msgEnter='Введите последовательность ';
  msgTooLong='Слишком длинная последовательность ';
  msgInvalid='Недопустимый символ в описании ';
  msgProteinM='Белок не начинается с M';
 
function DecodeRNA(const rna: String; start: Integer): String;
type
  TRec = record
    Codons: String[15];
    AmAcid: Char;
  end;
  TCodon = String[3];
const
  Codons: array [0..24] of TRec = (
    (Codons:'AUG'             ; AmAcid:'M'), {  0 }
    (Codons:'ACU ACC ACA ACG' ; AmAcid:'T'),
    (Codons:'AUU AUC AUA'     ; AmAcid:'I'),
    (Codons:'AAA AAG'         ; AmAcid:'K'),
    (Codons:'AAU AAC'         ; AmAcid:'N'),
    (Codons:'AGA AGG'         ; AmAcid:'R'),
    (Codons:'AGU AGC'         ; AmAcid:'S'),
    (Codons:'CAA CAG'         ; AmAcid:'Q'), {  7 }
    (Codons:'CAU CAC'         ; AmAcid:'H'),
    (Codons:'CCU CCC CCA CCG' ; AmAcid:'P'),
    (Codons:'CGU CGC CGA CGG' ; AmAcid:'R'),
    (Codons:'CUU CUC CUA CUG' ; AmAcid:'L'),
    (Codons:'GCU GCC GCA GCG' ; AmAcid:'A'), { 12 }
    (Codons:'GGU GGC GGA GGG' ; AmAcid:'G'),
    (Codons:'GUU GUC GUA GUG' ; AmAcid:'V'),
    (Codons:'GAU GAC'         ; AmAcid:'D'),
    (Codons:'GAA GAG'         ; AmAcid:'E'),
    (Codons:'UCU UCC UCA UCG' ; AmAcid:'S'), { 17 }
    (Codons:'UGU UGC'         ; AmAcid:'C'),
    (Codons:'UUA UUG'         ; AmAcid:'L'),
    (Codons:'UUU UUC'         ; AmAcid:'F'),
    (Codons:'UAU UAC'         ; AmAcid:'Y'),
    (Codons:'UGG'             ; AmAcid:'W'),
    (Codons:'UAA UGA UAG'     ; AmAcid:'B'),
    (Codons:#0                ; AmAcid:'?')); { барьер }
var
  i: Integer;
  c: TCodon;
  p: ^TRec;
  r: String;
  t: Char;
begin
  Result:='';
  SetLength(r,(Length(rna)-Start+1) div 3);
  for i:=0 to Length(r)-1 do begin
    c:=Copy(rna,Start+i*3,3); t:=c[1];
    case t of
      'A': p:=@Codons[0];
      'U': p:=@Codons[17];
      'G': p:=@Codons[12];
      'C': p:=@Codons[7];
      else Exit;
    end;
    while (t=p^.Codons[1]) and (Pos(c,p^.Codons)=0) do Inc(p);
    if t=p^.Codons[1] then r[i+1]:=p^.AmAcid;
  end;
  Result:=r;
end;
 
function CleanUp(var s: String; c: TUChars): Boolean;
const cEmpty=[' ','-'];
var i, j: Integer; t: Char;
begin
  CleanUp:=False; j:=0;
  for i:=1 to Length(s) do begin
    t:=UpCase(s[i]);
    if (t in c) or (t='.') then begin
      Inc(j); s[j]:=t;
    end else if not (t in cEmpty) then Exit;
  end;
  SetLength(s,j);
  CleanUp:=True;
end;
 
var
  { сортирован по неубыванию: по построению }
  line: array [0..999] of Integer;
  lineCnt: Integer;
 
procedure GetPos(n: Integer; var Row, Col: Integer);
var lt, rt, md: Integer;
begin
  lt:=0; rt:=lineCnt;
  while lt<rt do begin
    md:=lt+(rt-lt) div 2;
    if line[md]<=n then lt:=md+1 else rt:=md;
  end;
  Row:=lt; Col:=n-line[lt-1]+1;
end;
 
var
  rna, prt, t: String;
  i, j, k, row, col: Integer;
begin
  WriteLn(msgEnter,'РНК',':');
  line[0]:=1; lineCnt:=1;
  rna:='';
  repeat
    ReadLn(t);
    if not CleanUp(t,cRNA) then begin
      WriteLn(msgInvalid,'РНК'); Exit;
    end;
    i:=Pos('.',t); if i>0 then SetLength(t,i-1);
    rna:=rna+t;
    line[lineCnt]:=line[lineCnt-1]+Length(t); Inc(lineCnt);
  until i>0;
  
  WriteLn(msgEnter,'белка',':');
  prt:='';
  repeat
    ReadLn(t);
    if not CleanUp(t,cProt) then begin
      WriteLn(msgInvalid,'белка'); Exit;
    end;
    i:=Pos('.',t);
    if i>0 then begin
      t[i]:='B'; SetLength(t,i);
    end;
    prt:=prt+t;
  until i>0;
  if prt[1]<>'M' then begin
    WriteLn(msgProteinM); Exit;
  end;
  
  for i:=1 to 3 do begin
    t:=DecodeRNA(rna,i); j:=0;
    repeat
      j:=PosEx(prt,t,j+1); if j=0 then Break;
      GetPos((j-1)*3+i,row,col);
      Write('Найден (',row,', ',col,') - (');
      GetPos((j-1+Length(prt))*3+i-1,row,col);
      WriteLn(row,', ',col,')');
      Inc(k);
    until False;
  end;
  WriteLn('Всего найдено: ',k);
end.
